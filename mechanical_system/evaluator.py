import numpy as np
import pandas as pd


class LabeledProcessor(object):
    """Post-processor labelled magnet-assembly data."""

    def __init__(self, L, mf, mm):
        """
        Constructor

        Parameters
        ----------
        L : float
            Height of the microgenerator tube in mm.
        mf : float
            Height of the fixed magnet at the bottom of the tube in mm.
        mm : float
            Height of the moving magnet assembly in mm.

        Returns
        -------
        None
        """
        self.L = L
        self.mf = mf
        self.mm = mm

    def fit_transform(self, groundtruth_dataframe):
        """
        Process and transform the `groundtruth_dataframe` that is generated by
        the OpenCV-based CLI helper script and return the position of the moving
        magnet assembly in mm, relative to the top of the fixed magnet.
        """
        df = groundtruth_dataframe

        df['y'] = df['end_y'] - df['start_y']
        df['y_mm'] = df['y'] * df['y_pixel_scale']
        df['y_prime_mm'] = self.L - self.mf - self.mm - df['y_mm']
        df.loc[df['top_of_magnet'] == 0, 'y_prime_mm'] = df['y_prime_mm'] + self.mm
        self.processed_dataframe = df

        return df['y_prime_mm'].values


class Evaluator(object):
    """
    Evaluate the accuracy of the mechanical system model
    """

    def __init__(self, y_target, y_prediction=None):
        self.y_target = y_target
        self.y_prediction = y_prediction if not None else None

    def _fit():
        df = self.y_target


    def score(y_prediction):
        """Score `y_prediction`."""
        pass

    def poof():
        """
        Plot y_target and y_predicted
        """
        pass
